# -*- coding: utf-8 -*-
"""visualizacion_segmentos.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1OvkLDODxGbBs9C07ZzaXOfFy6ZsXvQJ_
"""

#visualizacion_segmentos Customer personality
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np

def plot_radar(df, cluster_col, variables, titulo="Radar Plot de segmentos"):
    """
    Crea un radar plot comparando segmentos en variables seleccionadas.

    Args:
        df: DataFrame.
        cluster_col: Nombre de la columna de clusters.
        variables: Lista de variables numéricas.
        titulo: Título del gráfico.
    """
    # Calcular medias
    cluster_means = df.groupby(cluster_col)[variables].mean()
    cluster_means_norm = cluster_means.copy()

    # Normalizar (0–1)
    for col in variables:
        min_val = cluster_means[col].min()
        max_val = cluster_means[col].max()
        cluster_means_norm[col] = (cluster_means[col] - min_val) / (max_val - min_val)

    # Datos para el radar
    categories = variables
    N = len(categories)

    angles = np.linspace(0, 2 * np.pi, N, endpoint=False).tolist()
    angles += angles[:1]  # Cerrar el círculo

    fig, ax = plt.subplots(figsize=(8, 8), subplot_kw=dict(polar=True))

    # Dibujar cada cluster
    for idx, row in cluster_means_norm.iterrows():
        values = row.tolist()
        values += values[:1]
        ax.plot(angles, values, label=f"Segmento {idx}")
        ax.fill(angles, values, alpha=0.1)

    ax.set_title(titulo, size=14, pad=30)
    ax.set_thetagrids(np.degrees(angles[:-1]), categories)
    ax.set_ylim(0, 1)
    ax.legend()
    ax.grid(True)
    plt.tight_layout()
    plt.show()

def plot_barras_normalizadas(df, cluster_col, variables, nombres_clusters=None):
    """
    Crea gráficos de barras con medias normalizadas por variable.

    Args:
        df: DataFrame.
        cluster_col: Nombre de la columna de clusters.
        variables: Lista de variables numéricas.
        nombres_clusters: Diccionario opcional {cluster_num: nombre}.
    """
    # Agrupar medias
    cluster_means = df.groupby(cluster_col)[variables].mean()

    # Normalizar 0–100
    cluster_perc = cluster_means.copy()
    for col in cluster_perc.columns:
        max_val = cluster_perc[col].max()
        cluster_perc[col] = (cluster_perc[col] / max_val) * 100

    # Reemplazar nombres de clusters si se proporcionan
    cluster_perc = cluster_perc.reset_index()
    if nombres_clusters:
        cluster_perc[cluster_col] = cluster_perc[cluster_col].map(nombres_clusters)

    # Crear grid de subplots
    cols = 3
    rows = -(-len(variables) // cols)
    fig, axes = plt.subplots(rows, cols, figsize=(cols * 5, rows * 4))
    axes = axes.flatten()

    # Graficar cada variable
    for i, var in enumerate(variables):
        sns.barplot(
            data=cluster_perc,
            x=cluster_col,
            y=var,
            hue=cluster_col,
            palette="Set2",
            legend=False,
            ax=axes[i]
        )
        axes[i].set_title(var)
        axes[i].set_ylabel("% del valor máximo")
        axes[i].set_xlabel("Segmento")
        axes[i].tick_params(axis='x', rotation=15)
        axes[i].set_ylim(0, 110)
        axes[i].grid(True, axis='y')

    # Eliminar subplots vacíos
    for j in range(i + 1, len(axes)):
        fig.delaxes(axes[j])

    plt.tight_layout()
    plt.show()